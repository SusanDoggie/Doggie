#!/bin/bash
#
#  The MIT License
#  Copyright (c) 2015 - 2020 Susan Cheng. All rights reserved.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.
#

set -e

PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"


# =================    checkout    =================
#
#                 update git submodule
#

cd ${PROJECT_DIR}
git submodule update --recursive


# =================    brotli    =================
#
#           generate c files for brotli
#

rm -rf ${PROJECT_DIR}/Sources/brotli/include/brotli || true
mkdir -p ${PROJECT_DIR}/Sources/brotli/include/brotli

rm -rf ${PROJECT_DIR}/Sources/brotli/src || true
mkdir -p ${PROJECT_DIR}/Sources/brotli/src/common
mkdir -p ${PROJECT_DIR}/Sources/brotli/src/dec
mkdir -p ${PROJECT_DIR}/Sources/brotli/src/enc

find ${PROJECT_DIR}/dependencies/brotli/c/include/brotli -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/brotli/include/brotli \;
find ${PROJECT_DIR}/dependencies/brotli/c/common -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/brotli/src/common \;
find ${PROJECT_DIR}/dependencies/brotli/c/common -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/brotli/src/common \;
find ${PROJECT_DIR}/dependencies/brotli/c/dec -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/brotli/src/dec \;
find ${PROJECT_DIR}/dependencies/brotli/c/dec -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/brotli/src/dec \;
find ${PROJECT_DIR}/dependencies/brotli/c/enc -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/brotli/src/enc \;
find ${PROJECT_DIR}/dependencies/brotli/c/enc -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/brotli/src/enc \;


# =================    libwebp    =================
#
#          generate c files for libwebp
#

rm -rff ${PROJECT_DIR}/Sources/libwebp/src || true
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/webp
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/dec
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/enc
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/mux
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/dsp
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/demux
mkdir -p ${PROJECT_DIR}/Sources/libwebp/src/utils

find ${PROJECT_DIR}/dependencies/libwebp/src/webp -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/webp \;
find ${PROJECT_DIR}/dependencies/libwebp/src/dec -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/dec \;
find ${PROJECT_DIR}/dependencies/libwebp/src/dec -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/dec \;
find ${PROJECT_DIR}/dependencies/libwebp/src/enc -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/enc \;
find ${PROJECT_DIR}/dependencies/libwebp/src/enc -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/enc \;
find ${PROJECT_DIR}/dependencies/libwebp/src/mux -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/mux \;
find ${PROJECT_DIR}/dependencies/libwebp/src/mux -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/mux \;
find ${PROJECT_DIR}/dependencies/libwebp/src/dsp -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/dsp \;
find ${PROJECT_DIR}/dependencies/libwebp/src/dsp -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/dsp \;
find ${PROJECT_DIR}/dependencies/libwebp/src/demux -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/demux \;
find ${PROJECT_DIR}/dependencies/libwebp/src/demux -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/demux \;
find ${PROJECT_DIR}/dependencies/libwebp/src/utils -name '*.h' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/utils \;
find ${PROJECT_DIR}/dependencies/libwebp/src/utils -name '*.c' -exec cp {} ${PROJECT_DIR}/Sources/libwebp/src/utils \;


# =================    libjpeg    =================
#
#       generate c files for libjpeg-turbo
#

mkdir -p ${PROJECT_DIR}/.build/dependencies/libjpeg-turbo

cd ${PROJECT_DIR}/.build/dependencies/libjpeg-turbo
cmake -G Ninja ${PROJECT_DIR}/dependencies/libjpeg-turbo

rm -rf ${PROJECT_DIR}/Sources/libjpeg/src || true
mkdir -p ${PROJECT_DIR}/Sources/libjpeg/src

SOURCES="$( ninja -t graph jpeg | grep -oE '"[^"]*\.c"' | tr -d '"' )"

for SOURCE in ${SOURCES}; do
  cp ${SOURCE} ${PROJECT_DIR}/Sources/libjpeg/src
done


rm -rf ${PROJECT_DIR}/Sources/libjpeg/include/libjpeg || true
mkdir -p ${PROJECT_DIR}/Sources/libjpeg/include/libjpeg

cp ${PROJECT_DIR}/dependencies/libjpeg-turbo/jpeglib.h ${PROJECT_DIR}/Sources/libjpeg/include/libjpeg
cp ${PROJECT_DIR}/dependencies/libjpeg-turbo/jmorecfg.h ${PROJECT_DIR}/Sources/libjpeg/include/libjpeg
cp ${PROJECT_DIR}/.build/dependencies/libjpeg-turbo/jconfig.h ${PROJECT_DIR}/Sources/libjpeg/include/libjpeg
cp ${PROJECT_DIR}/.build/dependencies/libjpeg-turbo/jconfigint.h ${PROJECT_DIR}/Sources/libjpeg/include/libjpeg
